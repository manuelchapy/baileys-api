<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 40px;
            text-align: center;
            max-width: 500px;
            width: 100%;
        }

        .logo {
            font-size: 2.5rem;
            margin-bottom: 20px;
            color: #25D366;
        }

        h1 {
            color: #333;
            margin-bottom: 20px;
            font-size: 2rem;
        }

        .message {
            color: #666;
            margin-bottom: 30px;
            font-size: 1.1rem;
            line-height: 1.6;
        }

        .qr-container {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            margin: 30px 0;
            border: 2px dashed #ddd;
        }

        .qr-code {
            max-width: 300px;
            width: 100%;
            height: auto;
            border-radius: 10px;
        }

        .status {
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            font-weight: 500;
        }

        .status.connecting {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .status.connected {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status.disconnected {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .btn {
            background: #25D366;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
            text-decoration: none;
            display: inline-block;
        }

        .btn:hover {
            background: #128C7E;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(37, 211, 102, 0.3);
        }

        .btn-secondary {
            background: #6c757d;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        .endpoints {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-top: 30px;
            text-align: left;
        }

        .endpoints h3 {
            color: #333;
            margin-bottom: 15px;
            text-align: center;
        }

        .endpoint {
            background: white;
            padding: 10px 15px;
            margin: 8px 0;
            border-radius: 5px;
            border-left: 4px solid #25D366;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
        }

        .method {
            font-weight: bold;
            color: #25D366;
        }

        .loading {
            display: none;
            color: #666;
            font-style: italic;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #25D366;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .refresh-btn {
            background: #17a2b8;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            margin: 10px;
            font-size: 0.9rem;
        }

        .refresh-btn:hover {
            background: #138496;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üì±</div>
        <h1>WhatsApp QR Scanner</h1>
        <p class="message"><%= message %></p>
        
        <div class="qr-container">
            <div id="qr-status" class="status connecting">
                Iniciando conexi√≥n...
            </div>
            
            <div id="qr-image-container">
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    Generando c√≥digo QR...
                </div>
                <img id="qr-image" class="qr-code" style="display: none;" alt="C√≥digo QR de WhatsApp">
            </div>
            
            <button class="refresh-btn" onclick="refreshQR()">üîÑ Actualizar QR</button>
            <button class="refresh-btn" onclick="connectRetry()" style="background: #28a745;">üîÑ Conectar con Retry</button>
            <button class="refresh-btn" onclick="restart()" style="background: #17a2b8;">üîÑ Reiniciar</button>
            <button class="refresh-btn" onclick="clearSession()" style="background: #dc3545;">üóëÔ∏è Limpiar Sesi√≥n</button>
        </div>

        <div class="endpoints">
            <h3>üìã Endpoints de la API</h3>
            <div class="endpoint">
                <span class="method">GET</span> /api/status - Estado de la API
            </div>
            <div class="endpoint">
                <span class="method">POST</span> /api/whatsapp/connect - Conectar WhatsApp
            </div>
            <div class="endpoint">
                <span class="method">GET</span> /api/whatsapp/qr - Obtener QR
            </div>
            <div class="endpoint">
                <span class="method">GET</span> /api/whatsapp/status - Estado de WhatsApp
            </div>
            <div class="endpoint">
                <span class="method">POST</span> /api/whatsapp/send-message - Enviar mensaje
            </div>
            <div class="endpoint">
                <span class="method">GET</span> /api/whatsapp/contacts - Obtener contactos
            </div>
            <div class="endpoint">
                <span class="method">POST</span> /api/whatsapp/disconnect - Desconectar
            </div>
            <div class="endpoint">
                <span class="method">POST</span> /api/whatsapp/clear-session - Limpiar sesi√≥n
            </div>
            <div class="endpoint">
                <span class="method">POST</span> /api/whatsapp/restart - Reiniciar conexi√≥n
            </div>
            <div class="endpoint">
                <span class="method">POST</span> /api/whatsapp/connect-retry - Conectar con retry
            </div>
            <div class="endpoint">
                <span class="method">POST</span> /api/whatsapp/welcome - Enviar mensaje de bienvenida
            </div>
            <div class="endpoint">
                <span class="method">POST</span> /api/whatsapp/webhook - Configurar webhook
            </div>
        </div>

        <div style="margin-top: 30px;">
            <a href="/api/status" class="btn">Ver Estado de la API</a>
            <a href="/api/whatsapp/status" class="btn btn-secondary">Estado de WhatsApp</a>
            <button class="btn" onclick="sendWelcome()" style="background: #28a745;">üì® Enviar Mensaje de Bienvenida</button>
        </div>

        <div style="margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 10px;">
            <h3>üîó Configurar Webhook para n8n</h3>
            <p>Configura la URL del webhook de n8n para recibir mensajes autom√°ticamente:</p>
            <div style="display: flex; gap: 10px; margin-top: 10px;">
                <input type="text" id="webhookUrl" value="<%= webhookUrl %>" placeholder="<%= webhookUrl %>" style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                <button onclick="setWebhook()" class="btn" style="background: #007bff;">üîó Configurar</button>
            </div>
            <p style="font-size: 0.9rem; color: #666; margin-top: 10px;">
                <strong>Nota:</strong> Esta es la URL de tu workflow espec√≠fico. Aseg√∫rate de que n8n est√© ejecut√°ndose y que el workflow est√© activo.
            </p>
        </div>
    </div>

    <script>
        let qrCheckInterval;
        let statusCheckInterval;

        // Funci√≥n para actualizar el QR
        async function updateQR() {
            try {
                const response = await fetch('/api/whatsapp/qr');
                const data = await response.json();
                
                const qrImage = document.getElementById('qr-image');
                const loading = document.getElementById('loading');
                const status = document.getElementById('qr-status');
                
                if (data.status === 'success' && data.qr) {
                    qrImage.src = data.qr;
                    qrImage.style.display = 'block';
                    loading.style.display = 'none';
                    status.textContent = 'Escanea el c√≥digo QR con tu WhatsApp';
                    status.className = 'status connecting';
                } else {
                    loading.style.display = 'block';
                    qrImage.style.display = 'none';
                    status.textContent = data.message || 'Generando c√≥digo QR...';
                    status.className = 'status connecting';
                }
            } catch (error) {
                console.error('Error al obtener QR:', error);
                document.getElementById('qr-status').textContent = 'Error al obtener c√≥digo QR';
                document.getElementById('qr-status').className = 'status disconnected';
            }
        }

        // Funci√≥n para verificar el estado de la conexi√≥n
        async function checkStatus() {
            try {
                const response = await fetch('/api/whatsapp/status');
                const data = await response.json();
                
                const status = document.getElementById('qr-status');
                const qrImage = document.getElementById('qr-image');
                const loading = document.getElementById('loading');
                
                if (data.isConnected) {
                    status.textContent = '‚úÖ WhatsApp conectado exitosamente';
                    status.className = 'status connected';
                    qrImage.style.display = 'none';
                    loading.style.display = 'none';
                    clearInterval(qrCheckInterval);
                    clearInterval(statusCheckInterval);
                } else if (data.hasQR) {
                    status.textContent = 'Escanea el c√≥digo QR con tu WhatsApp';
                    status.className = 'status connecting';
                } else {
                    status.textContent = 'Iniciando conexi√≥n...';
                    status.className = 'status connecting';
                }
            } catch (error) {
                console.error('Error al verificar estado:', error);
            }
        }

        // Funci√≥n para refrescar el QR
        function refreshQR() {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('qr-image').style.display = 'none';
            updateQR();
        }

        // Funci√≥n para conectar con retry
        async function connectRetry() {
            try {
                const response = await fetch('/api/whatsapp/connect-retry', { method: 'POST' });
                const data = await response.json();
                
                if (data.status === 'success') {
                    alert('Conectando con configuraci√≥n de retry...');
                    location.reload();
                } else {
                    alert('Error al conectar con retry: ' + data.message);
                }
            } catch (error) {
                console.error('Error al conectar con retry:', error);
                alert('Error al conectar con retry');
            }
        }

        // Funci√≥n para reiniciar la conexi√≥n
        async function restart() {
            if (confirm('¬øEst√°s seguro de que quieres reiniciar la conexi√≥n?')) {
                try {
                    const response = await fetch('/api/whatsapp/restart', { method: 'POST' });
                    const data = await response.json();
                    
                    if (data.status === 'success') {
                        alert('Conexi√≥n reiniciada. Recargando p√°gina...');
                        location.reload();
                    } else {
                        alert('Error al reiniciar: ' + data.message);
                    }
                } catch (error) {
                    console.error('Error al reiniciar:', error);
                    alert('Error al reiniciar conexi√≥n');
                }
            }
        }

        // Funci√≥n para limpiar la sesi√≥n
        async function clearSession() {
            if (confirm('¬øEst√°s seguro de que quieres limpiar la sesi√≥n? Esto eliminar√° todos los datos de autenticaci√≥n.')) {
                try {
                    const response = await fetch('/api/whatsapp/clear-session', { method: 'POST' });
                    const data = await response.json();
                    
                    if (data.status === 'success') {
                        alert('Sesi√≥n limpiada. Reiniciando conexi√≥n...');
                        location.reload();
                    } else {
                        alert('Error al limpiar sesi√≥n: ' + data.message);
                    }
                } catch (error) {
                    console.error('Error al limpiar sesi√≥n:', error);
                    alert('Error al limpiar sesi√≥n');
                }
            }
        }

        // Funci√≥n para enviar mensaje de bienvenida
        async function sendWelcome() {
            try {
                const response = await fetch('/api/whatsapp/welcome', { method: 'POST' });
                const data = await response.json();
                
                if (data.status === 'success') {
                    alert('Mensaje de bienvenida enviado exitosamente! Revisa tu WhatsApp.');
                } else {
                    alert('Error al enviar mensaje: ' + data.message);
                }
            } catch (error) {
                console.error('Error al enviar mensaje:', error);
                alert('Error al enviar mensaje de bienvenida');
            }
        }

        // Funci√≥n para configurar webhook
        async function setWebhook() {
            const webhookUrl = document.getElementById('webhookUrl').value;
            
            if (!webhookUrl) {
                alert('Por favor ingresa la URL del webhook');
                return;
            }

            try {
                const response = await fetch('/api/whatsapp/webhook', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ webhookUrl: webhookUrl })
                });
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    alert('Webhook configurado exitosamente! Ahora recibir√°s mensajes en n8n.');
                } else {
                    alert('Error al configurar webhook: ' + data.message);
                }
            } catch (error) {
                console.error('Error al configurar webhook:', error);
                alert('Error al configurar webhook');
            }
        }

        // Inicializar conexi√≥n y verificar estado
        async function init() {
            try {
                // Iniciar conexi√≥n
                await fetch('/api/whatsapp/connect', { method: 'POST' });
                
                // Actualizar QR cada 5 segundos
                updateQR();
                qrCheckInterval = setInterval(updateQR, 5000);
                
                // Verificar estado cada 2 segundos
                statusCheckInterval = setInterval(checkStatus, 2000);
                
            } catch (error) {
                console.error('Error al inicializar:', error);
                document.getElementById('qr-status').textContent = 'Error al conectar con WhatsApp';
                document.getElementById('qr-status').className = 'status disconnected';
            }
        }

        // Inicializar cuando se carga la p√°gina
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
